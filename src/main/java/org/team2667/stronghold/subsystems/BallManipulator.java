// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.team2667.stronghold.subsystems;

import org.team2667.stronghold.RobotMap;
import org.team2667.stronghold.commands.IdleRaisedShooter;

import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.CANTalon.TalonControlMode;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class BallManipulator extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon leftSideShooter = RobotMap.ballManipulatorLeftSideShooter;
    private final CANTalon rightSideShooter = RobotMap.ballManipulatorRightSideShooter;
    private final Solenoid leftShooterSolenoid = RobotMap.ballManipulatorLeftShooterSolenoid;
    private final Solenoid rightShooterSolenoid = RobotMap.ballManipulatorRightShooterSolenoid;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private double P = 0.01;
    private double I = 0;
    private double D = 0;
    private double F = 0.0265;
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    	initPID();
    }
    
    // Set up the PID values
    // Stole the code from eastview
    private void initPID() {
    	leftSideShooter.setPID(P, I, D);
    	rightSideShooter.setPID(P, I, D);
    	
    	leftSideShooter.setF(F);
    	rightSideShooter.setF(F);
    	
    	// Todo: Figure out what these variables do
    	// kek
    	
    	leftSideShooter.setStatusFrameRateMs(CANTalon.StatusFrameRate.QuadEncoder, 10);
    	leftSideShooter.configEncoderCodesPerRev(1024);
    	leftSideShooter.reverseSensor(true);
    	leftSideShooter.setEncPosition(0);
    	
    	rightSideShooter.setStatusFrameRateMs(CANTalon.StatusFrameRate.QuadEncoder, 10);
    	rightSideShooter.configEncoderCodesPerRev(1024);
    	rightSideShooter.reverseSensor(true);
    	rightSideShooter.setEncPosition(0);
    }
    
    // Moves the motors in the opposite direction
    public void driveMotor(double speed) {
    	leftSideShooter.changeControlMode(TalonControlMode.PercentVbus);
    	rightSideShooter.changeControlMode(TalonControlMode.PercentVbus);
    	
    	this.leftSideShooter.set(-speed);
    	this.rightSideShooter.set(speed);
    }
    
    // Let PID control the RPM
    public void setRPM(double speed) {
    	leftSideShooter.changeControlMode(TalonControlMode.Speed);
    	rightSideShooter.changeControlMode(TalonControlMode.Speed);
    	
    	leftSideShooter.set(-speed);
    	rightSideShooter.set(speed);
    }
    
    // Stop the motors
    public void stop() {
    	this.leftSideShooter.set(0);
    	this.rightSideShooter.set(0);
    }
    
    // Fire pusher
    public void fireSolenoids() {
    	leftShooterSolenoid.set(true);
    	rightShooterSolenoid.set(true);
    }
    
    // Retract pusher
    public void retractSolenoids() {
    	leftShooterSolenoid.set(false);
    }
    
}

