// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.team2667.stronghold.commands;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.team2667.stronghold.Robot;

/**
 *
 */
public class DriveStraight extends Command {

	private double speed;
	private long duration, initialTime;
	private double initialAngle;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public DriveStraight() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        this.speed = 0.5;
        this.duration = -1;
    }
    
    public DriveStraight(double speed, long duration) {
    	super();
    	this.speed = speed;
    	this.duration = duration;
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	initialAngle = Robot.driveTrain.getAngle();
    	initialTime = System.nanoTime() / 1000000;
    	Robot.driveTrain.setMaxOutput(1.0);
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	double kP = 0.03;
    	double angle = initialAngle - Robot.driveTrain.getAngle();
    	Robot.driveTrain.getRobotDrive().drive(speed, angle * kP);
    	SmartDashboard.putNumber("DriveStraight angle: ", angle * kP);
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	// Run until interrupted
    	if (duration == -1) {
    		return false;
    	}
    	
        return System.nanoTime() / 1000000 - initialTime >= duration;
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.driveTrain.stop();
    	Robot.driveTrain.setMaxOutput(0.5);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
}
