// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.team2667.stronghold;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.TalonSRX;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static CANTalon driveTrainLeftFrontCAN;
    public static CANTalon driveTrainLeftRearCAN;
    public static CANTalon driveTrainRightFrontCAN;
    public static CANTalon driveTrainRightRearCAN;
    public static RobotDrive driveTrainRobotDriveCAN;
    public static SpeedController driveTrainLeftFrontPWM;
    public static SpeedController driveTrainLeftRearPWM;
    public static SpeedController driveTrainRightFrontPWM;
    public static SpeedController driveTrainRightRearPWM;
    public static RobotDrive driveTrainRobotDrivePWM;
    public static AnalogGyro driveTrainGyro;
    public static CANTalon ballManipulatorLeftSideShooter;
    public static CANTalon ballManipulatorRightSideShooter;
    public static Solenoid ballManipulatorLeftShooterSolenoid;
    public static Solenoid ballManipulatorRightShooterSolenoid;
    public static Compressor pnumaticsCompressor;
    public static Solenoid pnumaticsShooterSolenoid;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static AnalogInput rangeFinder;
    public static CANTalon liftArmMotor;
    public static DigitalInput liftArmLimitSwitch;

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainLeftFrontCAN = new CANTalon(1);
        LiveWindow.addActuator("DriveTrain", "LeftFrontCAN", driveTrainLeftFrontCAN);
        
        driveTrainLeftRearCAN = new CANTalon(2);
        LiveWindow.addActuator("DriveTrain", "LeftRearCAN", driveTrainLeftRearCAN);
        
        driveTrainRightFrontCAN = new CANTalon(3);
        LiveWindow.addActuator("DriveTrain", "RightFrontCAN", driveTrainRightFrontCAN);
        
        driveTrainRightRearCAN = new CANTalon(4);
        LiveWindow.addActuator("DriveTrain", "RightRearCAN", driveTrainRightRearCAN);
        
        driveTrainRobotDriveCAN = new RobotDrive(driveTrainLeftFrontCAN, driveTrainLeftRearCAN,
              driveTrainRightFrontCAN, driveTrainRightRearCAN);
        
        driveTrainRobotDriveCAN.setSafetyEnabled(false);
        driveTrainRobotDriveCAN.setExpiration(0.1);
        driveTrainRobotDriveCAN.setSensitivity(0.25);
        driveTrainRobotDriveCAN.setMaxOutput(0.5);

        driveTrainLeftFrontPWM = new Talon(0);
        LiveWindow.addActuator("DriveTrain", "LeftFrontPWM", (Talon) driveTrainLeftFrontPWM);
        
        driveTrainLeftRearPWM = new Talon(1);
        LiveWindow.addActuator("DriveTrain", "LeftRearPWM", (Talon) driveTrainLeftRearPWM);
        
        driveTrainRightFrontPWM = new Talon(2);
        LiveWindow.addActuator("DriveTrain", "RightFrontPWM", (Talon) driveTrainRightFrontPWM);
        
        driveTrainRightRearPWM = new Talon(3);
        LiveWindow.addActuator("DriveTrain", "RightRearPWM", (Talon) driveTrainRightRearPWM);
        
        driveTrainRobotDrivePWM = new RobotDrive(driveTrainLeftFrontPWM, driveTrainLeftRearPWM,
              driveTrainRightFrontPWM, driveTrainRightRearPWM);
        
        driveTrainRobotDrivePWM.setSafetyEnabled(false);
        driveTrainRobotDrivePWM.setExpiration(0.1);
        driveTrainRobotDrivePWM.setSensitivity(0.25);
        driveTrainRobotDrivePWM.setMaxOutput(0.5);
        driveTrainRobotDrivePWM.setInvertedMotor(RobotDrive.MotorType.kFrontLeft, true);
        driveTrainRobotDrivePWM.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);
        driveTrainRobotDrivePWM.setInvertedMotor(RobotDrive.MotorType.kFrontRight, true);
        driveTrainGyro = new AnalogGyro(0);
        LiveWindow.addSensor("DriveTrain", "Gyro", driveTrainGyro);
        driveTrainGyro.setSensitivity(0.007);
        ballManipulatorLeftSideShooter = new CANTalon(5);
        LiveWindow.addActuator("BallManipulator", "LeftSideShooter", ballManipulatorLeftSideShooter);
        
        ballManipulatorRightSideShooter = new CANTalon(6);
        LiveWindow.addActuator("BallManipulator", "RightSideShooter", ballManipulatorRightSideShooter);
        
        ballManipulatorLeftShooterSolenoid = new Solenoid(7, 1);
        LiveWindow.addActuator("BallManipulator", "LeftShooterSolenoid", ballManipulatorLeftShooterSolenoid);
        
        ballManipulatorRightShooterSolenoid = new Solenoid(7, 2);
        LiveWindow.addActuator("BallManipulator", "RightShooterSolenoid", ballManipulatorRightShooterSolenoid);
        
        pnumaticsCompressor = new Compressor(7);
        
        
        pnumaticsShooterSolenoid = new Solenoid(7, 0);
        LiveWindow.addActuator("Pnumatics", "ShooterSolenoid", pnumaticsShooterSolenoid);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        rangeFinder = new AnalogInput(1);
        liftArmMotor = new CANTalon(8);
        liftArmLimitSwitch = new DigitalInput(2);
    }
}
